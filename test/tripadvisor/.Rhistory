value = happy.summary$positive*1000)
out = remapC(data,maptype = "world",color = 'skyblue')
plot(out)
data = data.frame(country = as.data.frame(countryname)[,1],
value = happy.summary$positive)
out = remapC(data,maptype = "world",color = 'skyblue')
plot(out)
head(data)
data = data.frame(country = as.character(as.data.frame(countryname)[,1]),
value = happy.summary$positive)
out = remapC(data,maptype = "world",color = 'skyblue')
plot(out)
data = data.frame(country = as.character(as.data.frame(countryname)[,1]),
value = happy.summary$positive)
remapC(data,maptype = "world",color = 'skyblue')
data = data.frame(country = as.character(as.data.frame(countryname)[,1]),
value = happy.summary$positive)
remapC(data,maptype = "world",color = 'skyblue')
remapC(data,maptype = "world",color = 'skyblue')->out
plot(out)
?remapC
data = data.frame(country = mapNames("world"),
value = 5*sample(178)+200)
head(data)
out = remapC(data,maptype = "world",color = 'skyblue')
plot(out)
remapC(data,maptype = "world",color = 'skyblue')
?map
countrycode2name<-read_csv("../data/countryname.csv")
data<-happy.summary%>%
inner_join(countrycode2name,by.x="country",by.y="alpha_3")
happy.summary
data<-inner_join(happy.summary,countrycode2name,by.x="country",by.y="alpha_3")
countrycode2name
data<-inner_join(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data
head(data)
data<-data[,c(11,12)]
head(data)
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11])
remapC(data,maptype = "world",color = 'skyblue')
happy.summary$country
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11])
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11]*100)
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11]*1000)
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11]*1000)
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
## Summary emotions
happy.summary=tbl_df(sentence.data)%>%
group_by(country)%>%
summarise(
anger=mean(anger,na.rm=TRUE),
anticipation=mean(anticipation,na.rm=TRUE),
disgust=mean(disgust,na.rm=TRUE),
fear=mean(fear,na.rm=TRUE),
joy=mean(joy,na.rm=TRUE),
sadness=mean(sadness,na.rm=TRUE),
surprise=mean(surprise,na.rm=TRUE),
trust=mean(trust,na.rm=TRUE),
negative=mean(negative,na.rm=TRUE),
positive=mean(positive,na.rm=TRUE)
)
happy.summary<-happy.summary[!is.na(happy.summary$country) ,]
countryname<-happy.summary$country
happyplot.summary<-data.matrix(happy.summary[,-1])
rownames(happyplot.summary)<-as.data.frame(countryname)[,1]
library(shiny)
div(d3heatmap(happyplot.summary, scale="none", colors= "Reds",
xaxis_font_size = 8,Rowv = FALSE,Colv=FALSE,show_grid=TRUE,yaxis_font_size = 4 ),
align='center')
head(iris)
docs <- Corpus(VectorSource(sel_data$text))
dtm <- DocumentTermMatrix(docs)
dtm <- DocumentTermMatrix(docs)
dtm= removeSparseTerms(dtm, 0.99)
dtm <- DocumentTermMatrix(docs)
dtm= removeSparseTerms(dtm, 0.99)
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
docs <- Corpus(VectorSource(sel_data$text))
dtm <- DocumentTermMatrix(docs)
dtm= removeSparseTerms(dtm, 0.99)
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
dtm  <- dtm[rowTotals> 0, ]
topic_data <- sel_data[rowTotals>0, ]
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
#Number of topics
k <- 9
#Run LDA using Gibbs sampling
ldaOut <-LDA(dtm, k, method="Gibbs", control=list(nstart=nstart,
seed = seed, best=best,
burnin = burnin, iter = iter,
thin=thin))
ldaOut.topics <- as.matrix(topics(ldaOut))
table(c(1:k, ldaOut.topics))
write.csv(ldaOut.topics,file=paste("../out/LDAGibbs",k,"DocsToTopics.csv"))
#top 6 terms in each topic
ldaOut.terms <- as.matrix(terms(ldaOut,20))
#probabilities associated with each topic assignment
topicProbabilities <- as.data.frame(ldaOut@gamma)
terms.beta=ldaOut@beta
terms.beta=scale(terms.beta)
topics.terms=NULL
for(i in 1:k){
topics.terms=rbind(topics.terms, ldaOut@terms[order(terms.beta[i,], decreasing = TRUE)[1:7]])
}
topics.terms
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11]*1000)
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
countrycode2name<-read_csv("../data/countryname.csv")
data<-merge(happy.summary,countrycode2name,by.x="country",by.y="alpha-3")
data = data.frame(country = data[,12],
value = data[,11]*1000)
out<-remapC(data,maptype = "world",color = 'skyblue')
plot(out)
knitr::opts_chunk$set(echo = TRUE)
theta<-seq(0,1,by=0.1)
theta
choose(4,3)
pry<-function(theta,y,n){
p<-choose(n,y)*theta^y(1-theta)^y
return(p)
}
pry(y=62,n=100,theta=0)
pry<-function(theta,y,n){
p<-choose(n,y)*theta^y*(1-theta)^y
return(p)
}
pry(y=62,theta=0,n=100)
?sapply
sapply(theta,pry,y=62,n=100)
plot(theta,pr)
pr<-sapply(theta,pry,y=62,n=100)
pr#probability of py(y=62|theta) for each of these 11 values of theta
plot(theta,pr)
pr<-sapply(theta,pry,y=62,n=100)
pr#probability of py(y=62|theta) for each of these 11 values of theta
pry<-function(theta,y,n){
p<-choose(n,y)*theta^y*(1-theta)^(n-y)
return(p)
}
pr<-sapply(theta,pry,y=62,n=100)
pr#probability of py(y=62|theta) for each of these 11 values of theta
plot(theta,pr)
plot(theta,pr,main="Pr(y=62|theta)",ylab="probability")
#Calculate the numerator
num<-pr*1/11
#Calculate the denominator
den<-sum(num)
post<-num/den
post
plot(theta,post,main="Posterior Probability",ylab="probability")
sum(pr)
pr
theta<-seq(0,1,by=0.01)
post<-sapply(theta,pry,y=62,n=100)
plot(theta,post,main="Posterior Density",ylab="density")
theta<-seq(0,1,by=0.01)
post<-sapply(theta,pry,y=62,n=100)
plot(theta,post,main="Posterior Density",ylab="density",type="l")
theta<-seq(0,1,by=0.005)
post<-sapply(theta,pry,y=62,n=100)
plot(theta,post,main="Posterior Density",ylab="density",type="l")
?dbeta
curve(dbeta,63,39)
curve(dbeta,shape1=63,shape2=39)
curve(dbeta(shape1=63,shape2=39))
curve(dbeta(x,shape1=63,shape2=39))
curve(dbeta(x,shape1=63,shape2=39),main="Beta(1+62,1+100-62",ylab="density")
curve(dbeta(x,shape1=63,shape2=39),main="Beta(1+62,1+100-62)",ylab="density")
?dbeta
curve(dbeta(x,shape1=2,shape2=8)
curve(dbeta(x,shape1=2,shape2=8)
curve(dbeta(x,shape1=2,shape2=8))
curve(dbeta(x,shape1=2,shape2=8),main="p(theta)",xlab="density")
curve(dbeta(x,shape1=2,shape2=8),main="p(theta)",ylab="density")
pr<-sapply(theta,pry,y=15,n=43)
plot(theta,pr,main="p(y|theta)",ylab="density")
plot(theta,pr,main="p(y|theta)",ylab="density",type="l")
curve(dbeta(x,shape1=17,shape2=36),main="p(theta|y",ylab="density")
curve(dbeta(x,shape1=2,shape2=8),main="p(theta)",ylab="density")
pr<-sapply(theta,pry,y=15,n=43)
plot(theta,pr,main="p(y|theta)",ylab="density",type="l")
curve(dbeta(x,shape1=17,shape2=36),main="p(theta|y)",ylab="density")
curve(dbeta(x,shape1=2,shape2=8),main="p(theta)",ylab="density")
pr<-sapply(theta,pry,y=15,n=43)
plot(theta,pr,main="p(y|theta)",ylab="density",type="l")
curve(dbeta(x,shape1=17,shape2=36),main="p(theta|y)",ylab="density")
mean<-17/53
mean # posterior mean
mode<-16/51
mode #posterior mode
sd<-sqrt(17*36/54/53/53)
sd # posterior standard deviation
mean(1-mean)/54
(mean(1-mean)/54)^(1/2.0)
17*36/54/53/53
(mean*(1-mean)/54)^(1/2.0)
?qbeta
mean<-17/53
mean # posterior mean
mode<-16/51
mode #posterior mode
sd<-sqrt(17*36/54/53/53)
sd # posterior standard deviation
l<- qbeta(0.025,17,36)#lower bound of CI
r<- qbeta(0.975,17,36)#upper bound of CI
c(l,r)
mean*(1-mean)/54
sqrt(0.004034651)
mean<-23/53
mean # posterior mean
mode<-22/51
mode #posterior mode
sd<-sqrt(23*30/54/53/53)
sd # posterior standard deviation
l<- qbeta(0.025,23,30)#lower bound of CI
r<- qbeta(0.975,23,30)#upper bound of CI
c(l,r) # 95% confidence interval
sqrt(mean*(1-mean)/54)
theta
prior<-0.75 *dbeta(theta,2,8)+0.25*dbeta(8,2)
prior<-0.75 *dbeta(theta,2,8)+0.25*dbeta(theta,8,2)
plot(theta,prior,main="prior distribution",ylab="density")
prior<-0.75 *dbeta(theta,2,8)+0.25*dbeta(theta,8,2)
plot(theta,prior,main="prior distribution",ylab="density",type="l")
gamma(10)
gamma(4)
choose(4,3)
post<-1/4*gamma(10)/gamma(2)/gamma(8)*choose(43,15)*(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
post
plot(theta,post)
post<(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
post<-(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
plot(theta,post)
post<--1/4*gamma(10)/gamma(2)/gamma(8)*choose(43,15)*(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
plot(theta,post)
post<-1/4*gamma(10)/gamma(2)/gamma(8)*choose(43,15)*(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
plot(theta,post)
p<-0.75 *dbeta(theta,17,36)+0.25*dbeta(theta,23,30)
plot(theta,p)
p<-0.75 *dbeta(theta,17,36)+0.25*dbeta(theta,23,30)
plot(theta,p)
post<-1/4*gamma(10)/gamma(2)/gamma(8)*choose(43,15)*(3*theta^16*(1-theta)^35+theta^22*(1-theta)^29)
plot(theta,post)
p<-0.75 *dbeta(theta,17,36)+0.25*dbeta(theta,23,30)
plot(theta,p)
which.max(post)
plot(theta,post,main="p(theta)*p(y|theta)",ylab="density")
which.max(post)
theta[which.max(post)]
7/8
0.3137*0.75+0.25*0.4314
ya<-c(12,9,12,14,13,13,15,8,15,6)
yb<-c(11,11,10,8,8,8,7,10,6,8,8,9,7)
length(ya)
length(yb)
sum(ya)
sum(yb)
?qgamma
mean<-237/20
mean
var<-237/20/20
var
l<-qgamma(0.025,shape=237,rate=20)
r<-qgamma(0.975,shape=237,rate=20)
c(l,r) #95% confidence interval
111+12
mean<-123/14
mean
var<-123/14/14
var
l<-qgamma(0.025,shape=123,rate=14)
r<-qgamma(0.975,shape=123,rate=14)
c(l,r) #95% confidence interval
mean<-123/14
mean
var<-123/14/14
var
l<-qgamma(0.025,shape=123,rate=14)
r<-qgamma(0.975,shape=123,rate=14)
c(l,r) #95% confidence interval
n0<-seq(1,50,by=1)
n0
ya<-c(12,9,12,14,13,13,15,8,15,6)
yb<-c(11,11,10,8,8,8,7,10,6,8,8,9,7)
sum(ya)
sum(yb)
n0<-seq(1,50,by=1)
postmean<-(12*n0+111)/(n0+13)
postmean
n0<-seq(1,50,by=1)
postmean<-(12*n0+111)/(n0+13)
plot(n0,postmean)
n0<-seq(1,50,by=1)
postmean<-(12*n0+111)/(n0+13)
plot(n0,postmean,type="l",main="posterior expectation under prior gamma(12n0,n0)",ylab="posterior expectation")
?abline
n0<-seq(1,50,by=1)
postmean<-(12*n0+111)/(n0+13)
plot(n0,postmean,type="l",main="posterior expectation under prior gamma(12n0,n0)",ylab="posterior expectation")
abline(h=11.85)
n0<-seq(1,50,by=1)
postmean<-(12*n0+111)/(n0+13)
plot(n0,postmean,type="l",main="posterior expectation under prior gamma(12n0,n0)",ylab="posterior expectation")
abline(h=11.85)
posterior
postmean
mean<-237/20
mean
var<-237/20/20
var
l<-qgamma(0.025,shape=237,rate=20)
r<-qgamma(0.975,shape=237,rate=20)
c(l,r) #95% confidence interval
register_google("AIzaSyA4YLjnU4EmlQ5nnrJJ6JCL65dxTmjkyZ0")
library(shiny)
library(leaflet)
library(leaflet.extras)
library(rebird)
library(geosphere)
register_google("AIzaSyA4YLjnU4EmlQ5nnrJJ6JCL65dxTmjkyZ0")
library(ggmap)
register_google("AIzaSyA4YLjnU4EmlQ5nnrJJ6JCL65dxTmjkyZ0")
runApp('Study/ads/pj2/tripadvisor')
runApp('Study/ads/pj2/tripadvisor')
runApp('Study/ads/pj2/tripadvisor')
source("../global.R")
getwd
getwd()
setwd("/Users/xiaoxi/Study/ads/pj2/tripadvisor")
source("../global.R")
coord<-geocode(input$location)
coord<-getlatlng()
lat<-coord[1]
long<-coord[2]
index<-sample(1:4,2,replace=F)
choice<-c("Theater","Museum","Gallery","Library","Restaurant")
choice1<-choice[index[1]]
choice2<-choice[index[2]]
index[3]<-length(choice)
choice3<-choice[index[3]]
output$c1<- renderText({choice1})
data_candidate<-all_data[c(choice1,choice2,choice3)]
##Get candidates according to the radius:
data_select<-lapply(data_candidate,get_candidate,Lon0=long,Lat0=lat,r=input$distance*1000)
##Get candidates according to the radius:
data_select<-lapply(data_candidate,get_candidate,Lon0=long,Lat0=lat,r=2000)
runApp()
?apply
knitr::opts_chunk$set(echo = TRUE)
dj <- readLines("Dow Jones Industrial Average - Wikipedia.htm",warn = FALSE)
lines<-dj[grepl("<td><a rel=",dj)]
symbol<-regmatches(lines,regexpr(">[A-Z]+",lines))
symbol<-substr(symbol,start=2,stop=length(symbol))
X<-data.frame()
library(quantmod)
for (i in 1:length(symbol)){
s<-symbol[i]
data<-getSymbols(s, auto.assign = F, from = "2018-01-01", to = "2019-01-01")
X<-cbind(X,data[,4])
}
colnames(X)<-symbol
X
as.Date("20180703")
as.Date(2018070")
asdf
)
1""
as.Date(20180703)
?as.Date
as.Date("2018-09-03")
as.Date("20180903",format=("%Y%m%d"))
iris
iris[1:100,]
iris[50:130,]
iris[50:130,]->train
runApp()
runApp()
runApp()
coord<-geocode("Time Square")
lat<-as.numeric(coord[2])
long<-as.numeric(coord[1])
runApp()
geocode("Time Square")
geocode("Time Squareasdfsdfa")
geocode("sadfdsfa")
geocode("sadfdsfa")->coord
is.na(coord)
runApp()
runApp()
runApp('~/Documents/GitHub/Spr2017-proj2-grp14/app')
runApp()
runApp()
install.packages("gogoleway")
install.packages("googleway")
library(googleway)
origin <- c(17.48693, 78.38945)
destination <- c(17.47077, 78.35874)
waypoints <- list(via = c(17.49222, 78.39643),
via = c(17.51965, 78.37835),
via = c(17.49359, 78.40079),
via = c(17.49284, 78.40686))
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints)
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,key="AIzaSyA8OuCvy04PC3N-K9y6DdEc32hUpNyUrl8")
res
res$routes$overview_polyline$points
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,key="AIzaSyA8OuCvy04PC3N-K9y6DdEc32hUpNyUrl8",simplify = F)
res
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,
key = key)
key="AIzaSyA8OuCvy04PC3N-K9y6DdEc32hUpNyUrl8"
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,
key = key)
df_polyline <- decode_pl(res$routes$overview_polyline$points)
library(leaflet)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon)
index<-sample(1:4,2,replace=F)
choice<-c("Theater","Museum","Gallery","Library","Restaurant")
choice1<-choice[index[1]]
choice2<-choice[index[2]]
index[3]<-length(choice)
choice3<-choice[index[3]]
data_candidate<-all_data[c(choice1,choice2,choice3)]
##Get candidates according to the radius:
data_select<-lapply(data_candidate,get_candidate,Lon0=long,Lat0=lat,r=input$distance*1000)
##Get candidates according to the radius:
data_select<-lapply(data_candidate,get_candidate,Lon0=long,Lat0=lat,r=2*1000)
targetplan<-lapply(data_select,randomchoice)
origin <- c(targetplan[[1]]$LON,targetplan[[1]]$LAT)
destination <- c(targetplan[[2]]$LON,targetplan[[2]]$LAT)
waypoints <- c(targetplan[[3]]$LON,targetplan[[3]]$LAT)
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,
key = key)
waypoints <- list(c(targetplan[[3]]$LON,targetplan[[3]]$LAT))
res <- google_directions(origin = origin,
destination = destination,
waypoints = waypoints,
key = key)
df_polyline <- decode_pl(res$routes$overview_polyline$points)
res$routes$overview_polyline$points
res
origin
destination
waypoints
res <- google_directions(origin = origin,
destination = destination,
#waypoints = waypoints,
key = key)
res
res <- google_directions(origin = origin,
destination = destination,mode=TRANSIT,
#waypoints = waypoints,
key = key)
res <- google_directions(origin = origin,
destination = destination,mode="transit",
#waypoints = waypoints,
key = key)
res
runApp()
runApp('~/Documents/GitHub/Fall2017-project2-grp6/app')
runApp()
runApp()
install.packages("shinyWidgets")
runApp('~/Documents/GitHub/Fall2017-project2-grp6/app')
runApp()
runApp()
